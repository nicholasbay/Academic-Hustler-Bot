import logging
from os import getenv

from dotenv import load_dotenv
from openai import OpenAI

CONV_MODEL = 'gpt-4-turbo'      # GPT model for generating responses
# CONV_MODEL = 'gpt-3.5-turbo'
TITLE_MODEL = 'gpt-4o-mini'     # GPT model for generating titles

logger = logging.getLogger(__name__)


def initialize_gpt_client() -> OpenAI:
    """
    Initializes the OpenAI client with the API key stored in the environment variables.

    Returns:
        OpenAI: The OpenAI client.
    """
    try:
        # Load environment variables
        load_dotenv()

        global client
        client = OpenAI(api_key=getenv('GPT_TOKEN'))        # GPT client

        logger.info('Successfully initialized GPT client.')
    except Exception as e:
        logger.error(f'Error initializing GPT client: {str(e)}')
        raise


def generate_response(prompt: str, past_messages: list) -> str:
    """
    Generates a text response from a given prompt using the GPT-4 model.

    This function constructs a list of messages starting with a system message
    that defines the assistant's behavior and standards. It then appends past
    responses and the user's prompt to this list. The function calls the OpenAI
    API with this message list to generate a response.

    Args:
        prompt (str): The user's input prompt.
        past_messages (list): A list of past messages in the conversation,
                              each represented as a dictionary with "role"
                              and "content" keys.

    Returns:
        str: The response generated by the GPT-4 model.
    """
    try:
        # Initialize message list with system message
        message_list = [
            {
                "role": "system",
                "content": """
                    You are a helpful academic study assistant that can provide accurate information and sound guidance.
                    Always seek to clarify any of the user's questions so that they are better able to understand the topic.
                    Do not give speculative or opinionated responses.
                    Use clear and straightforward language as much as possible.
                    Provide examples and additional resources wherever necessary to aid the user's understanding of the topic.
                """
            }]

        # Add past responses to message list
        for message in past_messages:
            message_list.append({
                "role": message["role"],
                "content": message["content"]
            })

        # Add user prompt to message list
        message_list.append({
            "role": "user",
            "content": prompt
        })

        # Call the OpenAI API
        completion = client.chat.completions.create(
            model=CONV_MODEL,
            messages=message_list,
            max_tokens=2048
        )

        # Get the response from the completion
        response = completion.choices[0].message.content

        # Return the response
        return response.strip()
    except Exception as e:
        logger.error(f'Error generating response: {str(e)}')
        raise


def generate_title(prompt: str) -> str:
    """
    Generates a concise title for a given prompt using the GPT-3.5 model.

    Args:
        prompt (str): The user's input prompt.

    Returns:
        str: The title generated by the GPT-3.5 model.
    """
    try:
        completion = client.chat.completions.create(
            model=TITLE_MODEL,
            messages=[
                {
                    "role": "system",
                    "content": """
                        You are a helpful assistant which can identify the main idea of a given prompt.
                        Generate a concise title that captures the main idea of the prompt.
                        The generated title should adhere to the following guidelines:
                        1. The title MUST be less than 5 words long.
                        2. Do not include unnecessary punctuation within the title.
                        3. Emojis may be used to enhance the title, wherever suitable. Emojis must be added to the end of the title.
                        """
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            max_tokens=10
        )

        title = completion.choices[0].message.content

        return title.strip()
    except Exception as e:
        logger.error(f'Error generating title: {str(e)}')
        raise
